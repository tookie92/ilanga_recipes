schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "ingredients"
"""
type ingredients {
  id: Int!
  name: String!
  quantite: String!

  """An object relationship"""
  recipe: recipes!
  recipe_id: Int!
}

"""
aggregated selection of "ingredients"
"""
type ingredients_aggregate {
  aggregate: ingredients_aggregate_fields
  nodes: [ingredients!]!
}

"""
aggregate fields of "ingredients"
"""
type ingredients_aggregate_fields {
  avg: ingredients_avg_fields
  count(columns: [ingredients_select_column!], distinct: Boolean): Int!
  max: ingredients_max_fields
  min: ingredients_min_fields
  stddev: ingredients_stddev_fields
  stddev_pop: ingredients_stddev_pop_fields
  stddev_samp: ingredients_stddev_samp_fields
  sum: ingredients_sum_fields
  var_pop: ingredients_var_pop_fields
  var_samp: ingredients_var_samp_fields
  variance: ingredients_variance_fields
}

"""
order by aggregate values of table "ingredients"
"""
input ingredients_aggregate_order_by {
  avg: ingredients_avg_order_by
  count: order_by
  max: ingredients_max_order_by
  min: ingredients_min_order_by
  stddev: ingredients_stddev_order_by
  stddev_pop: ingredients_stddev_pop_order_by
  stddev_samp: ingredients_stddev_samp_order_by
  sum: ingredients_sum_order_by
  var_pop: ingredients_var_pop_order_by
  var_samp: ingredients_var_samp_order_by
  variance: ingredients_variance_order_by
}

"""
input type for inserting array relation for remote table "ingredients"
"""
input ingredients_arr_rel_insert_input {
  data: [ingredients_insert_input!]!

  """on conflict condition"""
  on_conflict: ingredients_on_conflict
}

"""aggregate avg on columns"""
type ingredients_avg_fields {
  id: Float
  recipe_id: Float
}

"""
order by avg() on columns of table "ingredients"
"""
input ingredients_avg_order_by {
  id: order_by
  recipe_id: order_by
}

"""
Boolean expression to filter rows from the table "ingredients". All fields are combined with a logical 'AND'.
"""
input ingredients_bool_exp {
  _and: [ingredients_bool_exp!]
  _not: ingredients_bool_exp
  _or: [ingredients_bool_exp!]
  id: Int_comparison_exp
  name: String_comparison_exp
  quantite: String_comparison_exp
  recipe: recipes_bool_exp
  recipe_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "ingredients"
"""
enum ingredients_constraint {
  """unique or primary key constraint"""
  ingredients_pkey
}

"""
input type for incrementing numeric columns in table "ingredients"
"""
input ingredients_inc_input {
  id: Int
  recipe_id: Int
}

"""
input type for inserting data into table "ingredients"
"""
input ingredients_insert_input {
  id: Int
  name: String
  quantite: String
  recipe: recipes_obj_rel_insert_input
  recipe_id: Int
}

"""aggregate max on columns"""
type ingredients_max_fields {
  id: Int
  name: String
  quantite: String
  recipe_id: Int
}

"""
order by max() on columns of table "ingredients"
"""
input ingredients_max_order_by {
  id: order_by
  name: order_by
  quantite: order_by
  recipe_id: order_by
}

"""aggregate min on columns"""
type ingredients_min_fields {
  id: Int
  name: String
  quantite: String
  recipe_id: Int
}

"""
order by min() on columns of table "ingredients"
"""
input ingredients_min_order_by {
  id: order_by
  name: order_by
  quantite: order_by
  recipe_id: order_by
}

"""
response of any mutation on the table "ingredients"
"""
type ingredients_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [ingredients!]!
}

"""
on conflict condition type for table "ingredients"
"""
input ingredients_on_conflict {
  constraint: ingredients_constraint!
  update_columns: [ingredients_update_column!]! = []
  where: ingredients_bool_exp
}

"""Ordering options when selecting data from "ingredients"."""
input ingredients_order_by {
  id: order_by
  name: order_by
  quantite: order_by
  recipe: recipes_order_by
  recipe_id: order_by
}

"""primary key columns input for table: ingredients"""
input ingredients_pk_columns_input {
  id: Int!
}

"""
select columns of table "ingredients"
"""
enum ingredients_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  quantite

  """column name"""
  recipe_id
}

"""
input type for updating data in table "ingredients"
"""
input ingredients_set_input {
  id: Int
  name: String
  quantite: String
  recipe_id: Int
}

"""aggregate stddev on columns"""
type ingredients_stddev_fields {
  id: Float
  recipe_id: Float
}

"""
order by stddev() on columns of table "ingredients"
"""
input ingredients_stddev_order_by {
  id: order_by
  recipe_id: order_by
}

"""aggregate stddev_pop on columns"""
type ingredients_stddev_pop_fields {
  id: Float
  recipe_id: Float
}

"""
order by stddev_pop() on columns of table "ingredients"
"""
input ingredients_stddev_pop_order_by {
  id: order_by
  recipe_id: order_by
}

"""aggregate stddev_samp on columns"""
type ingredients_stddev_samp_fields {
  id: Float
  recipe_id: Float
}

"""
order by stddev_samp() on columns of table "ingredients"
"""
input ingredients_stddev_samp_order_by {
  id: order_by
  recipe_id: order_by
}

"""aggregate sum on columns"""
type ingredients_sum_fields {
  id: Int
  recipe_id: Int
}

"""
order by sum() on columns of table "ingredients"
"""
input ingredients_sum_order_by {
  id: order_by
  recipe_id: order_by
}

"""
update columns of table "ingredients"
"""
enum ingredients_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  quantite

  """column name"""
  recipe_id
}

"""aggregate var_pop on columns"""
type ingredients_var_pop_fields {
  id: Float
  recipe_id: Float
}

"""
order by var_pop() on columns of table "ingredients"
"""
input ingredients_var_pop_order_by {
  id: order_by
  recipe_id: order_by
}

"""aggregate var_samp on columns"""
type ingredients_var_samp_fields {
  id: Float
  recipe_id: Float
}

"""
order by var_samp() on columns of table "ingredients"
"""
input ingredients_var_samp_order_by {
  id: order_by
  recipe_id: order_by
}

"""aggregate variance on columns"""
type ingredients_variance_fields {
  id: Float
  recipe_id: Float
}

"""
order by variance() on columns of table "ingredients"
"""
input ingredients_variance_order_by {
  id: order_by
  recipe_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "ingredients"
  """
  delete_ingredients(
    """filter the rows which have to be deleted"""
    where: ingredients_bool_exp!
  ): ingredients_mutation_response

  """
  delete single row from the table: "ingredients"
  """
  delete_ingredients_by_pk(id: Int!): ingredients

  """
  delete data from the table: "recipes"
  """
  delete_recipes(
    """filter the rows which have to be deleted"""
    where: recipes_bool_exp!
  ): recipes_mutation_response

  """
  delete single row from the table: "recipes"
  """
  delete_recipes_by_pk(id: Int!): recipes

  """
  delete data from the table: "steps"
  """
  delete_steps(
    """filter the rows which have to be deleted"""
    where: steps_bool_exp!
  ): steps_mutation_response

  """
  delete single row from the table: "steps"
  """
  delete_steps_by_pk(id: Int!): steps

  """
  insert data into the table: "ingredients"
  """
  insert_ingredients(
    """the rows to be inserted"""
    objects: [ingredients_insert_input!]!

    """on conflict condition"""
    on_conflict: ingredients_on_conflict
  ): ingredients_mutation_response

  """
  insert a single row into the table: "ingredients"
  """
  insert_ingredients_one(
    """the row to be inserted"""
    object: ingredients_insert_input!

    """on conflict condition"""
    on_conflict: ingredients_on_conflict
  ): ingredients

  """
  insert data into the table: "recipes"
  """
  insert_recipes(
    """the rows to be inserted"""
    objects: [recipes_insert_input!]!

    """on conflict condition"""
    on_conflict: recipes_on_conflict
  ): recipes_mutation_response

  """
  insert a single row into the table: "recipes"
  """
  insert_recipes_one(
    """the row to be inserted"""
    object: recipes_insert_input!

    """on conflict condition"""
    on_conflict: recipes_on_conflict
  ): recipes

  """
  insert data into the table: "steps"
  """
  insert_steps(
    """the rows to be inserted"""
    objects: [steps_insert_input!]!

    """on conflict condition"""
    on_conflict: steps_on_conflict
  ): steps_mutation_response

  """
  insert a single row into the table: "steps"
  """
  insert_steps_one(
    """the row to be inserted"""
    object: steps_insert_input!

    """on conflict condition"""
    on_conflict: steps_on_conflict
  ): steps

  """
  update data of the table: "ingredients"
  """
  update_ingredients(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ingredients_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ingredients_set_input

    """filter the rows which have to be updated"""
    where: ingredients_bool_exp!
  ): ingredients_mutation_response

  """
  update single row of the table: "ingredients"
  """
  update_ingredients_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: ingredients_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: ingredients_set_input
    pk_columns: ingredients_pk_columns_input!
  ): ingredients

  """
  update data of the table: "recipes"
  """
  update_recipes(
    """increments the numeric columns with given value of the filtered values"""
    _inc: recipes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: recipes_set_input

    """filter the rows which have to be updated"""
    where: recipes_bool_exp!
  ): recipes_mutation_response

  """
  update single row of the table: "recipes"
  """
  update_recipes_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: recipes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: recipes_set_input
    pk_columns: recipes_pk_columns_input!
  ): recipes

  """
  update data of the table: "steps"
  """
  update_steps(
    """increments the numeric columns with given value of the filtered values"""
    _inc: steps_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: steps_set_input

    """filter the rows which have to be updated"""
    where: steps_bool_exp!
  ): steps_mutation_response

  """
  update single row of the table: "steps"
  """
  update_steps_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: steps_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: steps_set_input
    pk_columns: steps_pk_columns_input!
  ): steps
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """An array relationship"""
  ingredients(
    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): [ingredients!]!

  """An aggregate relationship"""
  ingredients_aggregate(
    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): ingredients_aggregate!

  """fetch data from the table: "ingredients" using primary key columns"""
  ingredients_by_pk(id: Int!): ingredients

  """
  fetch data from the table: "recipes"
  """
  recipes(
    """distinct select on columns"""
    distinct_on: [recipes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [recipes_order_by!]

    """filter the rows returned"""
    where: recipes_bool_exp
  ): [recipes!]!

  """
  fetch aggregated fields from the table: "recipes"
  """
  recipes_aggregate(
    """distinct select on columns"""
    distinct_on: [recipes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [recipes_order_by!]

    """filter the rows returned"""
    where: recipes_bool_exp
  ): recipes_aggregate!

  """fetch data from the table: "recipes" using primary key columns"""
  recipes_by_pk(id: Int!): recipes

  """
  fetch data from the table: "steps"
  """
  steps(
    """distinct select on columns"""
    distinct_on: [steps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [steps_order_by!]

    """filter the rows returned"""
    where: steps_bool_exp
  ): [steps!]!

  """An aggregate relationship"""
  steps_aggregate(
    """distinct select on columns"""
    distinct_on: [steps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [steps_order_by!]

    """filter the rows returned"""
    where: steps_bool_exp
  ): steps_aggregate!

  """fetch data from the table: "steps" using primary key columns"""
  steps_by_pk(id: Int!): steps
}

"""
columns and relationships of "recipes"
"""
type recipes {
  calories: String!
  id: Int!
  image_url: String

  """An array relationship"""
  ingredients(
    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): [ingredients!]!

  """An aggregate relationship"""
  ingredients_aggregate(
    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): ingredients_aggregate!
  name: String!

  """
  fetch data from the table: "steps"
  """
  steps(
    """distinct select on columns"""
    distinct_on: [steps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [steps_order_by!]

    """filter the rows returned"""
    where: steps_bool_exp
  ): [steps!]!

  """An aggregate relationship"""
  steps_aggregate(
    """distinct select on columns"""
    distinct_on: [steps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [steps_order_by!]

    """filter the rows returned"""
    where: steps_bool_exp
  ): steps_aggregate!
  time: String
}

"""
aggregated selection of "recipes"
"""
type recipes_aggregate {
  aggregate: recipes_aggregate_fields
  nodes: [recipes!]!
}

"""
aggregate fields of "recipes"
"""
type recipes_aggregate_fields {
  avg: recipes_avg_fields
  count(columns: [recipes_select_column!], distinct: Boolean): Int!
  max: recipes_max_fields
  min: recipes_min_fields
  stddev: recipes_stddev_fields
  stddev_pop: recipes_stddev_pop_fields
  stddev_samp: recipes_stddev_samp_fields
  sum: recipes_sum_fields
  var_pop: recipes_var_pop_fields
  var_samp: recipes_var_samp_fields
  variance: recipes_variance_fields
}

"""aggregate avg on columns"""
type recipes_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "recipes". All fields are combined with a logical 'AND'.
"""
input recipes_bool_exp {
  _and: [recipes_bool_exp!]
  _not: recipes_bool_exp
  _or: [recipes_bool_exp!]
  calories: String_comparison_exp
  id: Int_comparison_exp
  image_url: String_comparison_exp
  ingredients: ingredients_bool_exp
  name: String_comparison_exp
  steps: steps_bool_exp
  time: String_comparison_exp
}

"""
unique or primary key constraints on table "recipes"
"""
enum recipes_constraint {
  """unique or primary key constraint"""
  recipes_pkey
}

"""
input type for incrementing numeric columns in table "recipes"
"""
input recipes_inc_input {
  id: Int
}

"""
input type for inserting data into table "recipes"
"""
input recipes_insert_input {
  calories: String
  id: Int
  image_url: String
  ingredients: ingredients_arr_rel_insert_input
  name: String
  steps: steps_arr_rel_insert_input
  time: String
}

"""aggregate max on columns"""
type recipes_max_fields {
  calories: String
  id: Int
  image_url: String
  name: String
  time: String
}

"""aggregate min on columns"""
type recipes_min_fields {
  calories: String
  id: Int
  image_url: String
  name: String
  time: String
}

"""
response of any mutation on the table "recipes"
"""
type recipes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [recipes!]!
}

"""
input type for inserting object relation for remote table "recipes"
"""
input recipes_obj_rel_insert_input {
  data: recipes_insert_input!

  """on conflict condition"""
  on_conflict: recipes_on_conflict
}

"""
on conflict condition type for table "recipes"
"""
input recipes_on_conflict {
  constraint: recipes_constraint!
  update_columns: [recipes_update_column!]! = []
  where: recipes_bool_exp
}

"""Ordering options when selecting data from "recipes"."""
input recipes_order_by {
  calories: order_by
  id: order_by
  image_url: order_by
  ingredients_aggregate: ingredients_aggregate_order_by
  name: order_by
  steps_aggregate: steps_aggregate_order_by
  time: order_by
}

"""primary key columns input for table: recipes"""
input recipes_pk_columns_input {
  id: Int!
}

"""
select columns of table "recipes"
"""
enum recipes_select_column {
  """column name"""
  calories

  """column name"""
  id

  """column name"""
  image_url

  """column name"""
  name

  """column name"""
  time
}

"""
input type for updating data in table "recipes"
"""
input recipes_set_input {
  calories: String
  id: Int
  image_url: String
  name: String
  time: String
}

"""aggregate stddev on columns"""
type recipes_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type recipes_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type recipes_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type recipes_sum_fields {
  id: Int
}

"""
update columns of table "recipes"
"""
enum recipes_update_column {
  """column name"""
  calories

  """column name"""
  id

  """column name"""
  image_url

  """column name"""
  name

  """column name"""
  time
}

"""aggregate var_pop on columns"""
type recipes_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type recipes_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type recipes_variance_fields {
  id: Float
}

"""
columns and relationships of "steps"
"""
type steps {
  description: String!
  id: Int!
  image_url: String!

  """An object relationship"""
  recipe: recipes!
  recipe_id: Int!
}

"""
aggregated selection of "steps"
"""
type steps_aggregate {
  aggregate: steps_aggregate_fields
  nodes: [steps!]!
}

"""
aggregate fields of "steps"
"""
type steps_aggregate_fields {
  avg: steps_avg_fields
  count(columns: [steps_select_column!], distinct: Boolean): Int!
  max: steps_max_fields
  min: steps_min_fields
  stddev: steps_stddev_fields
  stddev_pop: steps_stddev_pop_fields
  stddev_samp: steps_stddev_samp_fields
  sum: steps_sum_fields
  var_pop: steps_var_pop_fields
  var_samp: steps_var_samp_fields
  variance: steps_variance_fields
}

"""
order by aggregate values of table "steps"
"""
input steps_aggregate_order_by {
  avg: steps_avg_order_by
  count: order_by
  max: steps_max_order_by
  min: steps_min_order_by
  stddev: steps_stddev_order_by
  stddev_pop: steps_stddev_pop_order_by
  stddev_samp: steps_stddev_samp_order_by
  sum: steps_sum_order_by
  var_pop: steps_var_pop_order_by
  var_samp: steps_var_samp_order_by
  variance: steps_variance_order_by
}

"""
input type for inserting array relation for remote table "steps"
"""
input steps_arr_rel_insert_input {
  data: [steps_insert_input!]!

  """on conflict condition"""
  on_conflict: steps_on_conflict
}

"""aggregate avg on columns"""
type steps_avg_fields {
  id: Float
  recipe_id: Float
}

"""
order by avg() on columns of table "steps"
"""
input steps_avg_order_by {
  id: order_by
  recipe_id: order_by
}

"""
Boolean expression to filter rows from the table "steps". All fields are combined with a logical 'AND'.
"""
input steps_bool_exp {
  _and: [steps_bool_exp!]
  _not: steps_bool_exp
  _or: [steps_bool_exp!]
  description: String_comparison_exp
  id: Int_comparison_exp
  image_url: String_comparison_exp
  recipe: recipes_bool_exp
  recipe_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "steps"
"""
enum steps_constraint {
  """unique or primary key constraint"""
  steps_pkey
}

"""
input type for incrementing numeric columns in table "steps"
"""
input steps_inc_input {
  id: Int
  recipe_id: Int
}

"""
input type for inserting data into table "steps"
"""
input steps_insert_input {
  description: String
  id: Int
  image_url: String
  recipe: recipes_obj_rel_insert_input
  recipe_id: Int
}

"""aggregate max on columns"""
type steps_max_fields {
  description: String
  id: Int
  image_url: String
  recipe_id: Int
}

"""
order by max() on columns of table "steps"
"""
input steps_max_order_by {
  description: order_by
  id: order_by
  image_url: order_by
  recipe_id: order_by
}

"""aggregate min on columns"""
type steps_min_fields {
  description: String
  id: Int
  image_url: String
  recipe_id: Int
}

"""
order by min() on columns of table "steps"
"""
input steps_min_order_by {
  description: order_by
  id: order_by
  image_url: order_by
  recipe_id: order_by
}

"""
response of any mutation on the table "steps"
"""
type steps_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [steps!]!
}

"""
on conflict condition type for table "steps"
"""
input steps_on_conflict {
  constraint: steps_constraint!
  update_columns: [steps_update_column!]! = []
  where: steps_bool_exp
}

"""Ordering options when selecting data from "steps"."""
input steps_order_by {
  description: order_by
  id: order_by
  image_url: order_by
  recipe: recipes_order_by
  recipe_id: order_by
}

"""primary key columns input for table: steps"""
input steps_pk_columns_input {
  id: Int!
}

"""
select columns of table "steps"
"""
enum steps_select_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  image_url

  """column name"""
  recipe_id
}

"""
input type for updating data in table "steps"
"""
input steps_set_input {
  description: String
  id: Int
  image_url: String
  recipe_id: Int
}

"""aggregate stddev on columns"""
type steps_stddev_fields {
  id: Float
  recipe_id: Float
}

"""
order by stddev() on columns of table "steps"
"""
input steps_stddev_order_by {
  id: order_by
  recipe_id: order_by
}

"""aggregate stddev_pop on columns"""
type steps_stddev_pop_fields {
  id: Float
  recipe_id: Float
}

"""
order by stddev_pop() on columns of table "steps"
"""
input steps_stddev_pop_order_by {
  id: order_by
  recipe_id: order_by
}

"""aggregate stddev_samp on columns"""
type steps_stddev_samp_fields {
  id: Float
  recipe_id: Float
}

"""
order by stddev_samp() on columns of table "steps"
"""
input steps_stddev_samp_order_by {
  id: order_by
  recipe_id: order_by
}

"""aggregate sum on columns"""
type steps_sum_fields {
  id: Int
  recipe_id: Int
}

"""
order by sum() on columns of table "steps"
"""
input steps_sum_order_by {
  id: order_by
  recipe_id: order_by
}

"""
update columns of table "steps"
"""
enum steps_update_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  image_url

  """column name"""
  recipe_id
}

"""aggregate var_pop on columns"""
type steps_var_pop_fields {
  id: Float
  recipe_id: Float
}

"""
order by var_pop() on columns of table "steps"
"""
input steps_var_pop_order_by {
  id: order_by
  recipe_id: order_by
}

"""aggregate var_samp on columns"""
type steps_var_samp_fields {
  id: Float
  recipe_id: Float
}

"""
order by var_samp() on columns of table "steps"
"""
input steps_var_samp_order_by {
  id: order_by
  recipe_id: order_by
}

"""aggregate variance on columns"""
type steps_variance_fields {
  id: Float
  recipe_id: Float
}

"""
order by variance() on columns of table "steps"
"""
input steps_variance_order_by {
  id: order_by
  recipe_id: order_by
}

type subscription_root {
  """An array relationship"""
  ingredients(
    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): [ingredients!]!

  """An aggregate relationship"""
  ingredients_aggregate(
    """distinct select on columns"""
    distinct_on: [ingredients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [ingredients_order_by!]

    """filter the rows returned"""
    where: ingredients_bool_exp
  ): ingredients_aggregate!

  """fetch data from the table: "ingredients" using primary key columns"""
  ingredients_by_pk(id: Int!): ingredients

  """
  fetch data from the table: "recipes"
  """
  recipes(
    """distinct select on columns"""
    distinct_on: [recipes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [recipes_order_by!]

    """filter the rows returned"""
    where: recipes_bool_exp
  ): [recipes!]!

  """
  fetch aggregated fields from the table: "recipes"
  """
  recipes_aggregate(
    """distinct select on columns"""
    distinct_on: [recipes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [recipes_order_by!]

    """filter the rows returned"""
    where: recipes_bool_exp
  ): recipes_aggregate!

  """fetch data from the table: "recipes" using primary key columns"""
  recipes_by_pk(id: Int!): recipes

  """
  fetch data from the table: "steps"
  """
  steps(
    """distinct select on columns"""
    distinct_on: [steps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [steps_order_by!]

    """filter the rows returned"""
    where: steps_bool_exp
  ): [steps!]!

  """An aggregate relationship"""
  steps_aggregate(
    """distinct select on columns"""
    distinct_on: [steps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [steps_order_by!]

    """filter the rows returned"""
    where: steps_bool_exp
  ): steps_aggregate!

  """fetch data from the table: "steps" using primary key columns"""
  steps_by_pk(id: Int!): steps
}

